import pandas as pd
import numpy as np
# ---------------------------------------------------------------------------------------

from os import path

test_df = {'PassengerId': {0: 1, 1: 2, 2: 3, 3: 4, 4: 5, 5: 6, 6: 7, 7: 8,  8: 9, 9: 10, 10: 11, 11: 12, 12: 13, 13: 14, 14: 15, 15: 16, 16: 17, 17: 18, 18: 19, 19: 20, 20: 21, 21: 22, 22: 23, 23: 24, 24: 25, 25: 26, 26: 27, 27: 28, 28: 29, 29: 30, 30: 31, 31: 32, 32: 33, 33: 34, 34: 35, 35: 36, 36: 37, 37: 38, 38: 39, 39: 40, 40: 41, 41: 42, 42: 43, 43: 44, 44: 45, 45: 46, 46: 47, 47: 48, 48: 49, 49: 50, 50: 51, 51: 52, 52: 53, 53: 54, 54: 55, 55: 56, 56: 57, 57: 58, 58: 59, 59: 60, 60: 61, 61: 62, 62: 63, 63: 64, 64: 65, 65: 66, 66: 67, 67: 68, 68: 69, 69: 70, 70: 71, 71: 72, 72: 73, 73: 74, 74: 75, 75: 76, 76: 77, 77: 78, 78: 79, 79: 80, 80: 81, 81: 82, 82: 83, 83: 84, 84: 85, 85: 86, 86: 87, 87: 88, 88: 89, 89: 90, 90: 91, 91: 92, 92: 93, 93: 94, 94: 95, 95: 96, 96: 97, 97: 98, 98: 99, 99: 100}, 
    'Survived': {0: 0, 1: 1, 2: 1, 3: 1, 4: 0, 5: 0, 6: 0, 7: 0, 8: 1, 9: 1, 10: 1, 11: 1, 12: 0, 13: 0, 14: 0, 15: 1, 16: 0, 17: 1, 18: 0, 19: 1, 20: 0, 21: 1, 22: 1, 23: 1, 24: 0, 25: 1, 26: 0, 27: 0, 28: 1, 29: 0, 30: 0, 31: 1, 32: 1, 33: 0, 34: 0, 35: 0, 36: 1, 37: 0, 38: 0, 39: 1, 40: 0, 41: 0, 42: 0, 43: 1, 44: 1, 45: 0, 46: 0, 47: 1, 48: 0, 49: 0, 50: 0, 51: 0, 52: 1, 53: 1, 54: 0, 55: 1, 56: 1, 57: 0, 58: 1, 59: 0, 60: 0, 61: 1, 62: 0, 63: 0, 64: 0, 65: 1, 66: 1, 67: 0, 68: 1, 69: 0, 70: 0, 71: 0, 72: 0, 73: 0, 74: 1, 75: 0, 76: 0, 77: 0, 78: 1, 79: 1, 80: 0, 81: 1, 82: 1, 83: 0, 84: 1, 85: 1, 86: 0, 87: 0, 88: 1, 89: 0, 90: 0, 91: 0, 92: 0, 93: 0, 94: 0, 95: 0, 96: 0, 97: 1, 98: 1, 99: 0}, 'Pclass': {0: 3, 1: 1, 2: 3, 3: 1, 4: 3, 5: 3, 6: 1, 7: 3, 8: 3, 9: 2, 10: 3, 11: 1, 12: 3, 13: 3, 14: 3, 15: 2, 16: 3, 17: 2, 18: 3, 19: 3, 20: 2, 21: 2, 22: 3, 23: 1, 24: 3, 25: 3, 26: 3, 27: 1, 28: 3, 29: 3, 30: 1, 31: 1, 32: 3, 33: 2, 34: 1, 35: 1, 36: 3, 37: 3, 38: 3, 39: 3, 40: 3, 41: 2, 42: 3, 43: 2, 44: 3, 45: 3, 46: 3, 47: 3, 48: 3, 49: 3, 50: 3, 51: 3, 52: 1, 53: 2, 54: 1, 55: 1, 56: 2, 57: 3, 58: 2, 59: 3, 60: 3, 61: 1, 62: 1, 63: 3, 64: 1, 65: 3, 66: 2, 67: 3, 68: 3, 69: 3, 70: 2, 71: 3, 72: 2, 73: 3, 74: 3, 75: 3, 76: 3, 77: 3, 78: 2, 79: 3, 80: 3, 81: 3, 82: 3, 83: 1, 84: 2, 85: 3, 86: 3, 87: 3, 88: 1, 89: 3, 90: 3, 91: 3, 92: 1, 93: 3, 94: 3, 95: 3, 96: 1, 97: 1, 98: 2, 99: 2}, 'Name': {0: 'Braund, Mr. Owen Harris', 1: 'Cumings, Mrs. John Bradley (Florence Briggs Thayer)', 2: 'Heikkinen, Miss. Laina', 3: 'Futrelle, Mrs. Jacques Heath (Lily May Peel)', 4: 'Allen, Mr. William Henry', 5: 'Moran, Mr. James', 6: 'McCarthy, Mr. Timothy J', 7: 'Palsson, Master. Gosta Leonard', 8: 'Johnson, Mrs. Oscar W (Elisabeth Vilhelmina Berg)', 9: 'Nasser, Mrs. Nicholas (Adele Achem)', 10: 'Sandstrom, Miss. Marguerite Rut', 11: 'Bonnell, Miss. Elizabeth', 12: 'Saundercock, Mr. William Henry', 13: 'Andersson, Mr. Anders Johan', 14: 'Vestrom, Miss. Hulda Amanda Adolfina', 15: 'Hewlett, Mrs. (Mary D Kingcome) ', 16: 'Rice, Master. Eugene', 17: 'Williams, Mr. Charles Eugene', 18: 'Vander Planke, Mrs. Julius (Emelia Maria Vandemoortele)', 19: 'Masselmani, Mrs. Fatima', 20: 'Fynney, Mr. Joseph J', 21: 'Beesley, Mr. Lawrence', 22: 'McGowan, Miss. Anna "Annie"', 23: 'Sloper, Mr. William Thompson', 24: 'Palsson, Miss. Torborg Danira', 25: 'Asplund, Mrs. Carl Oscar (Selma Augusta Emilia Johansson)', 26: 'Emir, Mr. Farred Chehab', 27: 'Fortune, Mr. Charles Alexander', 28: 'O\'Dwyer, Miss. Ellen "Nellie"', 29: 'Todoroff, Mr. Lalio', 30: 'Uruchurtu, Don. Manuel E', 31: 'Spencer, Mrs. William Augustus (Marie Eugenie)', 32: 'Glynn, Miss. Mary Agatha', 33: 'Wheadon, Mr. Edward H', 34: 'Meyer, Mr. Edgar Joseph', 35: 'Holverson, Mr. Alexander Oskar', 36: 'Mamee, Mr. Hanna', 37: 'Cann, Mr. Ernest Charles', 38: 'Vander Planke, Miss. Augusta Maria', 39: 'Nicola-Yarred, Miss. Jamila', 40: 'Ahlin, Mrs. Johan (Johanna Persdotter Larsson)', 41: 'Turpin, Mrs. William John Robert (Dorothy Ann Wonnacott)', 42: 'Kraeff, Mr. Theodor', 43: 'Laroche, Miss. Simonne Marie Anne Andree', 44: 'Devaney, Miss. Margaret Delia', 45: 'Rogers, Mr. William John', 46: 'Lennon, Mr. Denis', 47: "O'Driscoll, Miss. Bridget", 48: 'Samaan, Mr. Youssef', 49: 'Arnold-Franchi, Mrs. Josef (Josefine Franchi)', 50: 'Panula, Master. Juha Niilo', 51: 'Nosworthy, Mr. Richard Cater', 52: 'Harper, Mrs. Henry Sleeper (Myna Haxtun)', 53: 'Faunthorpe, Mrs. Lizzie (Elizabeth Anne Wilkinson)', 54: 'Ostby, Mr. Engelhart Cornelius', 55: 'Woolner, Mr. Hugh', 56: 'Rugg, Miss. Emily', 57: 'Novel, Mr. Mansouer', 58: 'West, Miss. Constance Mirium', 59: 'Goodwin, Master. William Frederick', 60: 'Sirayanian, Mr. Orsen', 61: 'Icard, Miss. Amelie', 62: 'Harris, Mr. Henry Birkhardt', 63: 'Skoog, Master. Harald', 64: 'Stewart, Mr. Albert A', 65: 'Moubarek, Master. Gerios', 66: 'Nye, Mrs. (Elizabeth Ramell)', 67: 'Crease, Mr. Ernest James', 68: 'Andersson, Miss. Erna Alexandra', 69: 'Kink, Mr. Vincenz', 70: 'Jenkin, Mr. Stephen Curnow', 71: 'Goodwin, Miss. Lillian Amy', 72: 'Hood, Mr. Ambrose Jr', 73: 'Chronopoulos, Mr. Apostolos', 74: 'Bing, Mr. Lee', 75: 'Moen, Mr. Sigurd Hansen', 76: 'Staneff, Mr. Ivan', 77: 'Moutal, Mr. Rahamin Haim', 78: 'Caldwell, Master. Alden Gates', 79: 'Dowdell, Miss. Elizabeth', 80: 'Waelens, Mr. Achille', 81: 'Sheerlinck, Mr. Jan Baptist', 82: 'McDermott, Miss. Brigdet Delia', 83: 'Carrau, Mr. Francisco M', 84: 'Ilett, Miss. Bertha', 85: 'Backstrom, Mrs. Karl Alfred (Maria Mathilda Gustafsson)', 86: 'Ford, Mr. William Neal', 87: 'Slocovski, Mr. Selman Francis', 88: 'Fortune, Miss. Mabel Helen', 89: 'Celotti, Mr. Francesco', 90: 'Christmann, Mr. Emil', 91: 'Andreasson, Mr. Paul Edvin', 92: 'Chaffee, Mr. Herbert Fuller', 93: 'Dean, Mr. Bertram Frank', 94: 'Coxon, Mr. Daniel', 95: 'Shorney, Mr. Charles Joseph', 96: 'Goldschmidt, Mr. George B', 97: 'Greenfield, Mr. William Bertram', 98: 'Doling, Mrs. John T (Ada Julia Bone)', 99: 'Kantor, Mr. Sinai'}, 'Sex': {0: 'male', 1: 'female', 2: 'female', 3: 'female', 4: 'male', 5: 'male', 6: 'male', 7: 'male', 8: 'female', 9: 'female', 10: 'female', 11: 'female', 12: 'male', 13: 'male', 14: 'female', 15: 'female', 16: 'male', 17: 'male', 18: 'female', 19: 'female', 20: 'male', 21: 'male', 22: 'female', 23: 'male', 24: 'female', 25: 'female', 26: 'male', 27: 'male', 28: 'female', 29: 'male', 30: 'male', 31: 'female', 32: 'female', 33: 'male', 34: 'male', 35: 'male', 36: 'male', 37: 'male', 38: 'female', 39: 'female', 40: 'female', 41: 'female', 42: 'male', 43: 'female', 44: 'female', 45: 'male', 46: 'male', 47: 'female', 48: 'male', 49: 'female', 50: 'male', 51: 'male', 52: 'female', 53: 'female', 54: 'male', 55: 'male', 56: 'female', 57: 'male', 58: 'female', 59: 'male', 60: 'male', 61: 'female', 62: 'male', 63: 'male', 64: 'male', 65: 'male', 66: 'female', 67: 'male', 68: 'female', 69: 'male', 70: 'male', 71: 'female', 72: 'male', 73: 'male', 74: 'male', 75: 'male', 76: 'male', 77: 'male', 78: 'male', 79: 'female', 80: 'male', 81: 'male', 82: 'female', 83: 'male', 84: 'female', 85: 'female', 86: 'male', 87: 'male', 88: 'female', 89: 'male', 90: 'male', 91: 'male', 92: 'male', 93: 'male', 94: 'male', 95: 'male', 96: 'male', 97: 'male', 98: 'female', 99: 'male'}, 'Age': {0: 22.0, 1: 38.0, 2: 26.0, 3: 35.0, 4: 35.0, 5: -1, 6: 54.0, 7: 2.0, 8: 27.0, 9: 14.0, 10: 4.0, 11: 58.0, 12: 20.0, 13: 39.0, 14: 14.0, 15: 55.0, 16: 2.0, 17: -1, 18: 31.0, 19: -1, 20: 35.0, 21: 34.0, 22: 15.0, 23: 28.0, 24: 8.0, 25: 38.0, 26: -1, 27: 19.0, 28: -1, 29: -1, 30: 40.0, 31: -1, 32: -1, 33: 66.0, 34: 28.0, 35: 42.0, 36: -1, 37: 21.0, 38: 18.0, 39: 14.0, 40: 40.0, 41: 27.0, 42: -1, 43: 3.0, 44: 19.0, 45: -1, 46: -1, 47: -1, 48: -1, 49: 18.0, 50: 7.0, 51: 21.0, 52: 49.0, 53: 29.0, 54: 65.0, 55: -1, 56: 21.0, 57: 28.5, 58: 5.0, 59: 11.0, 60: 22.0, 61: 38.0, 62: 45.0, 63: 4.0, 64: -1, 65: -1, 66: 29.0, 67: 19.0, 68: 17.0, 69: 26.0, 70: 32.0, 71: 16.0, 72: 21.0, 73: 26.0, 74: 32.0, 75: 25.0, 76: -1, 77: -1, 78: 0.83, 79: 30.0, 80: 22.0, 81: 29.0, 82: -1, 83: 28.0, 84: 17.0, 85: 33.0, 86: 16.0, 87: -1, 88: 23.0, 89: 24.0, 90: 29.0, 91: 20.0, 92: 46.0, 93: 26.0, 94: 59.0, 95: -1, 96: 71.0, 97: 23.0, 98: 34.0, 99: 34.0}, 'SibSp': {0: 1, 1: 1, 2: 0, 3: 1, 4: 0, 5: 0, 6: 0, 7: 3, 8: 0, 9: 1, 10: 1, 11: 0, 12: 0, 13: 1, 14: 0, 15: 0, 16: 4, 17: 0, 18: 1, 19: 0, 20: 0, 21: 0, 22: 0, 23: 0, 24: 3, 25: 1, 26: 0, 27: 3, 28: 0, 29: 0, 30: 0, 31: 1, 32: 0, 33: 0, 34: 1, 35: 1, 36: 0, 37: 0, 38: 2, 39: 1, 40: 1, 41: 1, 42: 0, 43: 1, 44: 0, 45: 0, 46: 1, 47: 0, 48: 2, 49: 1, 50: 4, 51: 0, 52: 1, 53: 1, 54: 0, 55: 0, 56: 0, 57: 0, 58: 1, 59: 5, 60: 0, 61: 0, 62: 1, 63: 3, 64: 0, 65: 1, 66: 0, 67: 0, 68: 4, 69: 2, 70: 0, 71: 5, 72: 0, 73: 1, 74: 0, 75: 0, 76: 0, 77: 0, 78: 0, 79: 0, 80: 0, 81: 0, 82: 0, 83: 0, 84: 0, 85: 3, 86: 1, 87: 0, 88: 3, 89: 0, 90: 0, 91: 0, 92: 1, 93: 1, 94: 0, 95: 0, 96: 0, 97: 0, 98: 0, 99: 1}, 'Parch': {0: 0, 1: 0, 2: 0, 3: 0, 4: 0, 5: 0, 6: 0, 7: 1, 8: 2, 9: 0, 10: 1, 11: 0, 12: 0, 13: 5, 14: 0, 15: 0, 16: 1, 17: 0, 18: 0, 19: 0, 20: 0, 21: 0, 22: 0, 23: 0, 24: 1, 25: 5, 26: 0, 27: 2, 28: 0, 29: 0, 30: 0, 31: 0, 32: 0, 33: 0, 34: 0, 35: 0, 36: 0, 37: 0, 38: 0, 39: 0, 40: 0, 41: 0, 42: 0, 43: 2, 44: 0, 45: 0, 46: 0, 47: 0, 48: 0, 49: 0, 50: 1, 51: 0, 52: 0, 53: 0, 54: 1, 55: 0, 56: 0, 57: 0, 58: 2, 59: 2, 60: 0, 61: 0, 62: 0, 63: 2, 64: 0, 65: 1, 66: 0, 67: 0, 68: 2, 69: 0, 70: 0, 71: 2, 72: 0, 73: 0, 74: 0, 75: 0, 76: 0, 77: 0, 78: 2, 79: 0, 80: 0, 81: 0, 82: 0, 83: 0, 84: 0, 85: 0, 86: 3, 87: 0, 88: 2, 89: 0, 90: 0, 91: 0, 92: 0, 93: 2, 94: 0, 95: 0, 96: 0, 97: 1, 98: 1, 99: 0}, 'Ticket': {0: 'A/5 21171', 1: 'PC 17599', 2: 'STON/O2. 3101282', 3: '113803', 4: '373450', 5: '330877', 6: '17463', 7: '349909', 8: '347742', 9: '237736', 10: 'PP 9549', 11: '113783', 12: 'A/5. 2151', 13: '347082', 14: '350406', 15: '248706', 16: '382652', 17: '244373', 18: '345763', 19: '2649', 20: '239865', 21: '248698', 22: '330923', 23: '113788', 24: '349909', 25: '347077', 26: '2631', 27: '19950', 28: '330959', 29: '349216', 30: 'PC 17601', 31: 'PC 17569', 32: '335677', 33: 'C.A. 24579', 34: 'PC 17604', 35: '113789', 36: '2677', 37: 'A./5. 2152', 38: '345764', 39: '2651', 40: '7546', 41: '11668', 42: '349253', 43: 'SC/Paris 2123', 44: '330958', 45: 'S.C./A.4. 23567', 46: '370371', 47: '14311', 48: '2662', 49: '349237', 50: '3101295', 51: 'A/4. 39886', 52: 'PC 17572', 53: '2926', 54: '113509', 55: '19947', 56: 'C.A. 31026', 57: '2697', 58: 'C.A. 34651', 59: 'CA 2144', 60: '2669', 61: '113572', 62: '36973', 63: '347088', 64: 'PC 17605', 65: '2661', 66: 'C.A. 29395', 67: 'S.P. 3464', 68: '3101281', 69: '315151', 70: 'C.A. 33111', 71: 'CA 2144', 72: 'S.O.C. 14879', 73: '2680', 74: '1601', 75: '348123', 76: '349208', 77: '374746', 78: '248738', 79: '364516', 80: '345767', 81: '345779', 82: '330932', 83: '113059', 84: 'SO/C 14885', 85: '3101278', 86: 'W./C. 6608', 87: 'SOTON/OQ 392086', 88: '19950', 89: '343275', 90: '343276', 91: '347466', 92: 'W.E.P. 5734', 93: 'C.A. 2315', 94: '364500', 95: '374910', 96: 'PC 17754', 97: 'PC 17759', 98: '231919', 99: '244367'}, 'Fare': {0: 7.25, 1: 71.2833, 2: 7.925, 3: 53.1, 4: 8.05, 5: 8.4583, 6: 51.8625, 7: 21.075, 8: 11.1333, 9: 30.0708, 10: 16.7, 11: 26.55, 12: 8.05, 13: 31.275, 14: 7.8542, 15: 16.0, 16: 29.125, 17: 13.0, 18: 18.0, 19: 7.225, 20: 26.0, 21: 13.0, 22: 8.0292, 23: 35.5, 24: 21.075, 25: 31.3875, 26: 7.225, 27: 263.0, 28: 7.8792, 29: 7.8958, 30: 27.7208, 31: 146.5208, 32: 7.75, 33: 10.5, 34: 82.1708, 35: 52.0, 36: 7.2292, 37: 8.05, 38: 18.0, 39: 11.2417, 40: 9.475, 41: 21.0, 42: 7.8958, 43: 41.5792, 44: 7.8792, 45: 8.05, 46: 15.5, 47: 7.75, 48: 21.6792, 49: 17.8, 50: 39.6875, 51: 7.8, 52: 76.7292, 53: 26.0, 54: 61.9792, 55: 35.5, 56: 10.5, 57: 7.2292, 58: 27.75, 59: 46.9, 60: 7.2292, 61: 80.0, 62: 83.475, 63: 27.9, 64: 27.7208, 65: 15.2458, 66: 10.5, 67: 8.1583, 68: 7.925, 69: 8.6625, 70: 10.5, 71: 46.9, 72: 73.5, 73: 14.4542, 74: 56.4958, 75: 7.65, 76: 7.8958, 77: 8.05, 78: 29.0, 79: 12.475, 80: 9.0, 81: 9.5, 82: 7.7875, 83: 47.1, 84: 10.5, 85: 15.85, 86: 34.375, 87: 8.05, 88: 263.0, 89: 8.05, 90: 8.05, 91: 7.8542, 92: 61.175, 93: 20.575, 94: 7.25, 95: 8.05, 96: 34.6542, 97: 63.3583, 98: 23.0, 99: 26.0}, 'Cabin': {0: -1, 1: 'C85', 2: -1, 3: 'C123', 4: -1, 5: -1, 6: 'E46', 7: -1, 8: -1, 9: -1, 10: 'G6', 11: 'C103', 12: -1, 13: -1, 14: -1, 15: -1, 16: -1, 17: -1, 18: -1, 19: -1, 20: -1, 21: 'D56', 22: -1, 23: 'A6', 24: -1, 25: -1, 26: -1, 27: 'C23 C25 C27', 28: -1, 29: -1, 30: -1, 31: 'B78', 32: -1, 33: -1, 34: -1, 35: -1, 36: -1, 37: -1, 38: -1, 39: -1, 40: -1, 41: -1, 42: -1, 43: -1, 44: -1, 45: -1, 46: -1, 47: -1, 48: -1, 49: -1, 50: -1, 51: -1, 52: 'D33', 53: -1, 54: 'B30', 55: 'C52', 56: -1, 57: -1, 58: -1, 59: -1, 60: -1, 61: 'B28', 62: 'C83', 63: -1, 64: -1, 65: -1, 66: 'F33', 67: -1, 68: -1, 69: -1, 70: -1, 71: -1, 72: -1, 73: -1, 74: -1, 75: 'F G73', 76: -1, 77: -1, 78: -1, 79: -1, 80: -1, 81: -1, 82: -1, 83: -1, 84: -1, 85: -1, 86: -1, 87: -1, 88: 'C23 C25 C27', 89: -1, 90: -1, 91: -1, 92: 'E31', 93: -1, 94: -1, 95: -1, 96: 'A5', 97: 'D10 D12', 98: -1, 99: -1}, 'Embarked': {0: 'S', 1: 'C', 2: 'S', 3: 'S', 4: 'S', 5: 'Q', 6: 'S', 7: 'S', 8: 'S', 9: 'C', 10: 'S', 11: 'S', 12: 'S', 13: 'S', 14: 'S', 15: 'S', 16: 'Q', 17: 'S', 18: 'S', 19: 'C', 20: 'S', 21: 'S', 22: 'Q', 23: 'S', 24: 'S', 25: 'S', 26: 'C', 27: 'S', 28: 'Q', 29: 'S', 30: 'C', 31: 'C', 32: 'Q', 33: 'S', 34: 'C', 35: 'S', 36: 'C', 37: 'S', 38: 'S', 39: 'C', 40: 'S', 41: 'S', 42: 'C', 43: 'C', 44: 'Q', 45: 'S', 46: 'Q', 47: 'Q', 48: 'C', 49: 'S', 50: 'S', 51: 'S', 52: 'C', 53: 'S', 54: 'C', 55: 'S', 56: 'S', 57: 'C', 58: 'S', 59: 'S', 60: 'C', 61: -1, 62: 'S', 63: 'S', 64: 'C', 65: 'C', 66: 'S', 67: 'S', 68: 'S', 69: 'S', 70: 'S', 71: 'S', 72: 'S', 73: 'C', 74: 'S', 75: 'S', 76: 'S', 77: 'S', 78: 'S', 79: 'S', 80: 'S', 81: 'S', 82: 'Q', 83: 'S', 84: 'S', 85: 'S', 86: 'S', 87: 'S', 88: 'S', 89: 'S', 90: 'S', 91: 'S', 92: 'S', 93: 'S', 94: 'S', 95: 'S', 96: 'C', 97: 'C', 98: 'S', 99: 'S'}}

def rank_cardinality(df):
    """
    Takes a dataframe and returns it's column names 
    listed in order of increasing cardinality
    Params:
        df (pandas DataFrame)
    
    Returns:
        List of df column names from lowest cardinality to highest cardinality.
    """

    cat_columns = df.describe(exclude='number').columns
    perc_unique = {}
    for col in cat_columns:
        pu = df[col].nunique() / df.shape[0]
        perc_unique.update({col: pu})

    sorted_pu = sorted(perc_unique.values())
    sorted_names = []
    for pu in sorted_pu:
        sorted_names.append([col for col, perc_unq in perc_unique.items() if perc_unq == pu][0])
    
    return sorted_names

    



def cardinality_report(df):
    """
    Takes a dataframe and returns a report on the cardinality
    of categorical columns within the dataframe
    Params:
        df (pandas DataFrame)
    
    Returns:
        A series of 4 Print Statements for each Categorical Column
        identified in the dataframe separated by a newline
        The ouptut is ordered from lowest cardinality to 
        highest cardinality variables
    """
    # Get only categorical features from DF
    # Apply Ranking Function
    ranked_categoricals = rank_cardinality(df)
    
    # Evaluate cardinality qualities for each feature
    for i, col in enumerate(ranked_categoricals):
        print('-------------')
        print(f"COLUMN: {col}")
        print(f"nUnique: {df[col].nunique()}")
        print("--- TOP 5 ---")
        print(df[col].value_counts().nlargest(5))
        print('\n')